"use server";

import { inngest } from "@/inngest/client";
import { auth } from "@/lib/auth";
import { db } from "@/server/db";
import { revalidatePath } from "next/cache";
import { headers } from "next/headers";
import { redirect } from "next/navigation";
import { GetObjectCommand, S3Client } from "@aws-sdk/client-s3";
import { getSignedUrl } from "@aws-sdk/s3-request-presigner";
import { env } from "@/env";

export interface GenerateRequest {
  prompt?: string;
  lyrics?: string;
  fullDesribedSong?: string;
  describedLyrics?: string;
  instrumental?: boolean;
}

export const generateSong = async (generateRequest: GenerateRequest) => {
  const sessiion = await auth.api.getSession({
    headers: await headers(),
  });

  if (!sessiion) {
    // throw new Error("Unauthorized");
    redirect("/auth/sign-in");
  }

  await queueSong(generateRequest, 7.5, sessiion.user.id);
  console.log("Done, revalidate the server path");
};

export const queueSong = async (
  generateRequest: GenerateRequest,
  guidanceScale: number,
  userId: string,
) => {
  let title = "Untitled";

  if (generateRequest.describedLyrics) {
    title = generateRequest.describedLyrics;
  }
  if (generateRequest.fullDesribedSong) {
    title = generateRequest.fullDesribedSong;
  }

  title = title.charAt(0).toUpperCase() + title.slice(1);

  // Add song queued infomation to database
  const song = await db.song.create({
    data: {
      userId: userId,
      title: title,
      prompt: generateRequest.prompt,
      lyrics: generateRequest.lyrics,
      fullDescribedSong: generateRequest.fullDesribedSong,
      describedLyrics: generateRequest.describedLyrics,
      instrumental: generateRequest.instrumental,
      guidanceScale: guidanceScale,
      audioDuration: 180,
    },
  });
  // Send Song's info to inggenst to continue

  console.log("Send event to inngest ...");

  await inngest.send({
    name: "generate-song-event",
    data: {
      songId: song.id,
      userId: song.userId,
    },
  });
};

export const getPresignedUrl = async (key: string) => {
  const s3Client = new S3Client({
    region: env.AWS_REGION,
    credentials: {
      accessKeyId: env.AWS_ACCESS_KEY_ID,
      secretAccessKey: env.AWS_SECRET_ACCESS_KEY,
    },
  });

  const command = new GetObjectCommand({
    Bucket: env.S3_BUCKET_NAME,
    Key: key,
  });

  return await getSignedUrl(s3Client, command, {
    expiresIn: 3600,
  });
};

export const getPlayUrl = async (songId: string) => {
  const sessiion = await auth.api.getSession({
    headers: await headers(),
  });

  if (!sessiion) {
    // throw new Error("Unauthorized");
    redirect("/auth/sign-in");
  }

  const song = await db.song.findUniqueOrThrow({
    where: {
      id: songId,
      OR: [{ userId: sessiion.user.id }, { published: true }],
      s3Key: {
        not: null,
      },
    },
    select: {
      s3Key: true,
    },
  });

  // update lượt nghe
  await db.song.update({
    where: {
      id: songId,
    },
    data: {
      listenCount: {
        increment: 1,
      },
    },
  });

  return await getPresignedUrl(song.s3Key!);
};
